pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    //stage('Static Code Analysis') {
     // environment {
       // SONAR_URL = "http://18.188.41.178:9000/"
      //}
      //steps {
       // withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_AUTH_TOKEN')]) {
        //  sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
       // }
      //}
   // }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ganeshnelli/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('dockerhub')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "dockerhub") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "Ganesh-nelli"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git checkout main
                    git clean -fd  # Remove untracked files and directories
                    git pull origin main
                    git config user.email "iamganesh.nelli@gmail.com"
                    git config user.name "Ganesh-nelli"
                    echo "Before modification: "
                    cat java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s|ganeshnelli/ultimate-cicd:[^ ]*|ganeshnelli/ultimate-cicd:${BUILD_NUMBER}|g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    echo "After modification: "
                    cat java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  }
  post {
  always {
      script {
          def jobName = env.JOB_NAME
          def buildNumber = env.BUILD_NUMBER
          def pipelineStatus = currentBuild.result?: 'UNKNOWN'
          def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green': 'red'
                
          def body = """
              <html>
              <body>
              <div style="border: 4px solid ${bannerColor}; padding: 10px;">
              <h2>${jobName} - Build ${buildNumber}</h2>
              <div style="background-color: ${bannerColor}; padding: 10px;">
              </div>
              <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3> 
              <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
              </div>
              </body>
              </html>
          """
            
          emailext (
              subject: "${jobName} Build ${buildNumber} ${pipelineStatus.toUpperCase()}", 
              body: body,
              to: 'iamganesh.nelli@gmail.com',
              from: 'jenkins@dev.com',
              replyTo: 'jenkins@example.com', 
              mimeType: 'text/html',
              //attachmentsPattern: 'trivy-report.html'
            )
        }
    }
}
}
