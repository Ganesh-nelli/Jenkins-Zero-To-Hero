pipeline {
    agent any  // agent { label 'dev' }

    environment {
        KUBE_CONFIG = credentials('kubeconfig') // replace with your credential ID
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout') {
            steps {
                // Checkout your code from the main branch
                git branch: 'main', url: 'https://github.com/Ganesh-nelli/Jenkins-Zero-To-Hero.git'
                sh 'ls -la'
            }
        }
        stage('Navigate to App Directory') {
            steps {
                // Change directory to where the charts are located
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app/charts') {
                    sh 'ls -l' // List files to confirm we are in the right directory
                }
            }
        }
        stage('Validate') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app/charts') {
                    sh 'ls -l' // Ensure we can see the charts
                }
            }
        }
        stage('Run Helm') {
            steps {
                script {
                    def version = '' // Declare version variable at a higher scope
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app/charts') {
                        sh 'ls -l' // Debugging to see files in the charts directory
                        version = sh(script: "sed -n 's/^version: //p' Chart.yaml", returnStdout: true).trim() // Assign value to version
                        echo "Chart Version: ${version}"

                        // Package the Helm chart
                        sh "helm package . --version ${version}-main --destination ../packaged"
                        sh "ls -la ../packaged" // List the packaged files
                    }
                    //currentBuild.displayName = version // Optionally set the display name for better tracking
                    env.VERSION = version // Store the version in the environment variable
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: 'mycluster.k8s.local', contextName: '', credentialsId: 'kubeconfig', namespace: 'myapp-namespace', restrictKubeConfigAccess: false, serverUrl: 'https://api-mycluster-k8s-local-9s4spt-6674601.us-east-1.elb.amazonaws.com') {
                        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app/charts') {
                            // Use the version from the environment variable
                            sh "helm upgrade --install myapp ../packaged/myapp-${env.VERSION}-main.tgz --namespace myapp-namespace"
                        }
                    }
                }
            }
        }
    }
  post {
  always {
      script {
          def jobName = env.JOB_NAME
          def buildNumber = env.BUILD_NUMBER
          def pipelineStatus = currentBuild.result?: 'UNKNOWN'
          def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green': 'red'
                
          def body = """
              <html>
              <body>
              <div style="border: 4px solid ${bannerColor}; padding: 10px;">
              <h2>${jobName} - Build ${buildNumber}</h2>
              <div style="background-color: ${bannerColor}; padding: 10px;">
              </div>
              <h3 style="color: black;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3> 
              <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
              </div>
              </body>
              </html>
          """
            
          emailext (
              subject: "${jobName} Build ${buildNumber} ${pipelineStatus.toUpperCase()}", 
              body: body,
              to: 'iamganesh.nelli@gmail.com',
              from: 'jenkins@dev.com',
              replyTo: 'jenkins@example.com', 
              mimeType: 'text/html',
              //attachmentsPattern: 'trivy-report.html'
            )
        }
    }
}
}
